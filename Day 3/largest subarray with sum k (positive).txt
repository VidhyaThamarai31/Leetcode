Given an array arr containing n integers and an integer k. Your task is to find the length of the longest Sub-Array with the sum of the elements equal to the given value k.

Examples:

Input : n = 6, arr[] = {10, 5, 2, 7, 1, 9}, k = 15
Output : 4
Explanation: The sub-array is {5, 2, 7, 1}.
Input : n= 3, arr[] = {-1, 2, 3}, k = 6
Output : 0
Explanation: There is no such sub-array with sum 6.
Expected Time Complexity: O(n).
Expected Auxiliary Space: O(n).

Constraints:
1<=n<=105
-105<=arr[i], K<=105

Solution:

class Solution {
    // Function for finding maximum and value pair
    public static int lenOfLongSubarr(int arr[], int n, int k) {
        // Complete the function
        HashMap<Integer,Integer> mp=new HashMap<>();
        int prefix=0;
        int cnt=0;
        //mp.put(0,-1);
        for(int i=0;i<n;i++)
        {
            prefix+=arr[i];
            if(prefix==k)
            cnt=i+1;
            if(mp.containsKey(prefix-k))
            {
                cnt=Math.max(cnt,i-mp.get(prefix-k));
            }
            if(!mp.containsKey(prefix))
            mp.put(prefix,i);
        }
        return cnt;
    }
}
